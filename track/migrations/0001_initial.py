# Generated by Django 5.1.6 on 2025-05-09 14:23

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('user_profile', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DailyRecoveryLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('pain_level', models.PositiveSmallIntegerField(blank=True, help_text='0(ağrı yok) - 10(kullanılamaz)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('mobility_score', models.PositiveSmallIntegerField(blank=True, help_text='0(hareketsiz) - 10(tam hareket)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('swelling_present', models.BooleanField(blank=True, null=True)),
                ('fever', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(35), django.core.validators.MaxValueValidator(42)])),
                ('mood_level', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('appetite_level', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('note', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='DistractionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distraction_amount', models.FloatField(help_text='Günlük uzatma (mm)', validators=[django.core.validators.MinValueValidator(0.25), django.core.validators.MaxValueValidator(2.0)])),
                ('total_distraction', models.FloatField(blank=True, null=True)),
                ('pin_site_condition', models.CharField(choices=[('normal', 'Normal'), ('redness', 'Kızarıklık'), ('swelling', 'Şişlik'), ('discharge', 'Akıntı'), ('infection', 'Enfeksiyon')], default='normal', max_length=20)),
                ('pin_site_notes', models.TextField(blank=True, null=True)),
                ('xray_notes', models.TextField(blank=True, null=True)),
                ('adjustment_notes', models.TextField(blank=True, null=True)),
                ('pain_during_distraction', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('daily_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='distraction_logs', to='track.dailyrecoverylog')),
            ],
        ),
        migrations.CreateModel(
            name='ExerciseLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exercise_name', models.CharField(max_length=100)),
                ('duration_minutes', models.PositiveIntegerField(help_text='Süre (dk)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(300)])),
                ('exercise_type', models.CharField(choices=[('stretching', 'Esneme'), ('strength', 'Kuvvet'), ('cardio', 'Kardiyo'), ('balance', 'Denge'), ('functional', 'Fonksiyonel')], max_length=50)),
                ('intensity', models.PositiveSmallIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], default=3)),
                ('sets', models.PositiveSmallIntegerField(blank=True, default=1, null=True)),
                ('reps', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('completed', models.BooleanField(default=True)),
                ('pain_during_exercise', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('daily_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercises', to='track.dailyrecoverylog')),
            ],
        ),
        migrations.CreateModel(
            name='MedicationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medicine_name', models.CharField(max_length=100)),
                ('dosage', models.CharField(max_length=50)),
                ('frequency', models.CharField(blank=True, choices=[('once', 'Günde 1'), ('twice', 'Günde 2'), ('thrice', 'Günde 3'), ('as_needed', 'İhtiyaç halinde')], default='once', max_length=20, null=True)),
                ('taken', models.BooleanField(default=False)),
                ('time_taken', models.TimeField(blank=True, null=True)),
                ('side_effects', models.TextField(blank=True, null=True)),
                ('daily_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medications', to='track.dailyrecoverylog')),
            ],
        ),
        migrations.CreateModel(
            name='MoodLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mood_description', models.CharField(choices=[('happy', 'Mutlu'), ('sad', 'Üzgün'), ('anxious', 'Endişeli'), ('angry', 'Kızgın'), ('tired', 'Yorgun'), ('energetic', 'Enerjik'), ('neutral', 'Nötr')], max_length=20)),
                ('level', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('triggers', models.TextField(blank=True, default='', null=True)),
                ('coping_mechanisms', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('daily_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='moods', to='track.dailyrecoverylog')),
            ],
        ),
        migrations.CreateModel(
            name='NutritionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meal_type', models.CharField(choices=[('breakfast', 'Kahvaltı'), ('lunch', 'Öğle'), ('dinner', 'Akşam'), ('snack', 'Ara')], default='breakfast', max_length=20)),
                ('calories', models.PositiveIntegerField()),
                ('protein_g', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('carbs_g', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('fat_g', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('water_intake_ml', models.PositiveIntegerField(blank=True, null=True)),
                ('supplements', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('daily_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nutrition', to='track.dailyrecoverylog')),
            ],
        ),
        migrations.CreateModel(
            name='PainLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body_part', models.CharField(choices=[('head', 'Baş'), ('neck', 'Boyun'), ('shoulder', 'Omuz'), ('arm', 'Kol'), ('elbow', 'Dirsek'), ('wrist', 'Bilek'), ('hand', 'El'), ('chest', 'Göğüs'), ('back', 'Sırt'), ('lower_back', 'Bel'), ('hip', 'Kalça'), ('thigh', 'Uyluk'), ('knee', 'Diz'), ('calf', 'Baldır'), ('ankle', 'Ayak Bileği'), ('foot', 'Ayak')], max_length=20)),
                ('intensity', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('pain_type', models.CharField(blank=True, choices=[('sharp', 'Keskin'), ('dull', 'Donuk'), ('throbbing', 'Zonklayıcı'), ('burning', 'Yanıcı'), ('stabbing', 'Bıçak')], default='sharp', max_length=20, null=True)),
                ('duration_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('triggered_by', models.CharField(blank=True, max_length=100, null=True)),
                ('relieved_by', models.CharField(blank=True, max_length=100, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('daily_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pain_details', to='track.dailyrecoverylog')),
            ],
        ),
        migrations.CreateModel(
            name='RecoveryCycle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cycle_type', models.CharField(blank=True, choices=[('limb_lengthening', 'Uzuv Uzatma'), ('fracture', 'Kırık İyileşme'), ('post_surgery', 'Ameliyat Sonrası'), ('general', 'Genel Rehabilitasyon')], default='general', help_text='Rehabilitasyon tipi', max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('goal_description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recovery_cycles', to='user_profile.patient')),
            ],
        ),
        migrations.CreateModel(
            name='LimbLengtheningInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bone', models.CharField(choices=[('femur', 'Femur'), ('tibia', 'Tibia'), ('humerus', 'Humerus'), ('fibula', 'Fibula')], max_length=20)),
                ('initial_length', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('target_length', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('current_length', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('device_type', models.CharField(choices=[('precice', 'PRECICE'), ('lrs', 'LRS'), ('ilizarov', 'Ilizarov'), ('other', 'Diğer')], max_length=20)),
                ('device_model', models.CharField(blank=True, max_length=100, null=True)),
                ('surgery_date', models.DateField()),
                ('surgeon_name', models.CharField(max_length=100)),
                ('hospital_name', models.CharField(blank=True, max_length=100, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('recovery_cycle', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='limb_lengthening_info', to='track.recoverycycle')),
            ],
        ),
        migrations.CreateModel(
            name='LengtheningMilestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('milestone_date', models.DateField()),
                ('milestone_type', models.CharField(choices=[('distraction_start', 'Distraksiyon Başlangıç'), ('distraction_end', 'Distraksiyon Bitiş'), ('partial_weight', 'Kısmi Yük'), ('full_weight', 'Tam Yük'), ('device_removal', 'Cihaz Çıkarılma'), ('physio_start', 'Fizyoterapi Başlangıç'), ('bone_healing', 'Kemik Kaynama'), ('full_recovery', 'Tam İyileşme')], max_length=50)),
                ('achieved_length', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_achieved', models.BooleanField(default=False)),
                ('target_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('celebration_note', models.TextField(blank=True, null=True)),
                ('recovery_cycle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to='track.recoverycycle')),
            ],
        ),
        migrations.AddField(
            model_name='dailyrecoverylog',
            name='recovery_cycle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_logs', to='track.recoverycycle'),
        ),
        migrations.CreateModel(
            name='BoneConsolidationCheck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_date', models.DateField()),
                ('bone_gap', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('callus_formation', models.CharField(choices=[('none', 'Yok'), ('minimal', 'Minimal'), ('moderate', 'Orta'), ('good', 'İyi'), ('excellent', 'Mükemmel')], max_length=20)),
                ('weight_bearing_status', models.CharField(choices=[('none', 'Yasak'), ('toe_touch', 'Parmak Ucu'), ('partial', 'Kısmi'), ('full', 'Tam')], max_length=20)),
                ('next_check_date', models.DateField()),
                ('doctor_name', models.CharField(blank=True, max_length=100, null=True)),
                ('xray_image', models.ImageField(blank=True, null=True, upload_to='consolidation_xrays/')),
                ('doctor_notes', models.TextField(blank=True, null=True)),
                ('patient_feedback', models.TextField(blank=True, null=True)),
                ('recovery_cycle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consolidation_checks', to='track.recoverycycle')),
            ],
        ),
        migrations.CreateModel(
            name='SleepLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sleep_duration', models.DecimalField(decimal_places=2, max_digits=4, validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(24)])),
                ('sleep_quality', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('bedtime', models.TimeField(blank=True, default='23:59', null=True)),
                ('wakeup_time', models.TimeField(blank=True, null=True)),
                ('naps_duration', models.DecimalField(blank=True, decimal_places=1, help_text='Gündüz uykusu (saat)', max_digits=3, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('daily_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sleep', to='track.dailyrecoverylog')),
            ],
        ),
    ]
